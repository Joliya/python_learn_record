"""
@file: 学生出勤次数.py
@time: 2024/8/19 20:06
@desc:

可以用字符串表示一个学生的出勤记录，其中的每个字符用来标记当天的出勤情况（缺勤、迟到、到场）。记录中只含下面三种字符：
'A'：Absent，缺勤
'L'：Late，迟到
'P'：Present，到场
如果学生能够 同时 满足下面两个条件，则可以获得出勤奖励：

按 总出勤 计，学生缺勤（'A'）严格 少于两天。
学生 不会 存在 连续 3 天或 连续 3 天以上的迟到（'L'）记录。（说明只需要判断结尾的连续吃到次数即可）
给你一个整数 n ，表示出勤记录的长度（次数）。请你返回记录长度为 n 时，可能获得出勤奖励的记录情况 数量 。答案可能很大，所以返回对 109 + 7 取余 的结果。



示例 1：

输入：n = 2
输出：8
解释：
有 8 种长度为 2 的记录将被视为可奖励：
"PP" , "AP", "PA", "LP", "PL", "AL", "LA", "LL"
只有"AA"不会被视为可奖励，因为缺勤次数为 2 次（需要少于 2 次）。
示例 2：

输入：n = 1
输出：3
示例 3：

输入：n = 10101
输出：183236316

"""


class Solution:
    def checkRecord(self, n: int) -> int:
        """
        动态规划
        分别以第 i 天以 A、L、P 结尾的合法字符串数量来计算
        第i天的数量 取决于 i-1 天的数量
        1 <= i <= n
        0 <= j < 2
        0 <= k < 3
        :param n:
        :return:
        """
        # 定义一个二维数组dp，dp[i][j][k]表示前i天有j个‘A’且结尾有连续k个‘L’的合法字符串数量
        dp = [[[0] * 3 for _ in range(2)] for _ in range(n + 1)]
        # 初始化dp数组
        dp[0][0][0] = 1
        # 遍历每一天
        for i in range(1, n + 1):
            # 第 i 天 以‘P’结尾，不会增加‘A’和‘L’的数量，
            for j in range(2):
                for k in range(3):
                    dp[i][j][0] = (dp[i][j][0] + dp[i - 1][j][k]) % (10 ** 9 + 7)
            # 以‘A’结尾
            for k in range(3):
                dp[i][1][0] = (dp[i][1][0] + dp[i - 1][0][k]) % (10 ** 9 + 7)
            # 以‘L’结尾
            for j in range(2):
                for k in range(1, 3):
                    dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j][k - 1]) % (10 ** 9 + 7)
        # 计算结果
        res = 0
        for j in range(2):
            for k in range(3):
                res = (res + dp[n][j][k]) % (10 ** 9 + 7)
        return res
